ex:1) Java program to demonstrate Unboxing
Solution:
import java.util.ArrayList;
  class Unboxing
   {
    public static void main(String[] args)
   {
   Character ch = 'a';
// unboxing - Character object to primitive conversion
    char a = ch;
ArrayList<Integer> arrayList = new ArrayList<Integer>();
     arrayList.add(24);
// unboxing because get method returns an Integer object
     int num = arrayList.get(0);
// printing the values from primitive data types
     System.out.println(num);
}
}
Output:24

ex:2) // JVM to run Garbage Collector
public class Test {
	public static void main(String[] args) throws InterruptedException {
		Test t1 = new Test();
		Test t2 = new Test();
// Nullifying the reference variable
		t1 = null;
// requesting JVM for running Garbage Collector
		System.gc();
// Nullifying the reference variable
		t2 = null;
// requesting JVM for running Garbage Collector
		Runtime.getRuntime().gc();
	}
@ Override
// finalize method is called on object once
// before garbage collecting it
	protected void finalize() throws Throwable {
		System.out.println("Garbage collector called");
		System.out.println("Object garbage collected : " + this);
	}
}
 
 Output:Garbage collector called

ex3) 
Write a program to create a class called Employee having the following data members.
1.An ID for storing unique id allocated to every employee.
2.Name of employee.
3.age of an employee.
Also, provide the following methods-
1. A parameterized constructor to initialize name and age. The ID should be initialized in this 
constructor.
2. A method show() to display ID, name, and age.
3. A method showNextId() to display the ID of the next employee
Solution:
class Employee
{
private int ID;
private String name;
private int age;
private static int nextId=1;
//it is made static because it
// is keep common among all and
// shared by all objects
public Employee(String name,int age)
{
this.name = name;
this.age = age;
this.ID = nextId++;
}
public void show()
{
System.out.println
("Id="+ID+"\nName="+name+"\nAge="+age);
}
public void showNextId()
{
System.out.println
("Next employee id will be="+nextId);
}
protected void finalize()
{
--nextId;
//In this case,
//gc will call finalize()
//for 2 times for 2 objects.
}
}
// it is closing brace of Employee class
class UseEmployee
{
	public static void main(String []args)
{
Employee E=new Employee("GFG1",56);
Employee F=new Employee("GFG2",45);
Employee G=new Employee("GFG3",25);
E.show();
F.show();
G.show();
E.showNextId();
F.showNextId();
G.showNextId();
{
//It is sub block to keep
// all those interns.
Employee X=new Employee("GFG4",23);
Employee Y=new Employee("GFG5",21);
X.show();
Y.show();
X.showNextId();
Y.showNextId();
X = Y = null;
System.gc();
System.runFinalization();
}
E.showNextId();
}
}
Output:
Id=1
Name=GFG1
Age=56
Id=2
Name=GFG2
Age=45
Id=3
Name=GFG3
Age=25
Next employee id will be=4
Next employee id will be=4
Next employee id will be=4
Id=4
Name=GFG4
Age=23
Id=5
Name=GFG5
Age=21
Next employee id will be=6
Next employee id will be=6
Next employee id will be=4
